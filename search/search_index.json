{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> ToyData </p> <p> Learning Data Structures with toy code </p> <p> </p> <p></p> <p>There are some simple implementations of classic data structures, and I am trying to do this with an easy-to-read style.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>pip install toydata</code></p> <p>Note that: If you had change the default mirror of pip to another one, such as https://pypi.tuna.tsinghua.edu.cn/simple or http://pypi.douban.com/simple , you may have to install with <code>pip install toydata -i https://pypi.org/simple</code></p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>http://datahonor.com/toydata/</li> </ul>"},{"location":"#data-structures","title":"Data Structures","text":"<ul> <li> Stack: ArrayStack, LinkedStack</li> <li> Queue: ArrayQueue, ArrayDeque</li> <li> Deque: LinkedDeque</li> <li> Positional List: PositionalList</li> <li> Priority Queues: UnsortedPriorityQueue, SortedPriorityQueue, HeapPriorityQueue</li> <li> LinkedLists: Singlellist, Doublellist</li> <li> Hash Tables: ChainHashMap, ProbeHashMap, SortedTableMap</li> <li> Trees: LinkedBinaryTree</li> <li> Search Trees: AVLTreeMap, SplayTreeMap, RedBlackTreeMap</li> <li> Graph: Adjacency Map, DFS/BFS, Floyd-Warshall</li> </ul>"},{"location":"#references","title":"References","text":""},{"location":"#books","title":"Books","text":"<p>Data Structures and Algorithms in Python, Michael T. Goodrich is the main reference of the implementations.</p> <p>Note that there is a book named Data Structures and Algorithms in C++, Michael T. Goodrich which use C++ to implement these data structures.</p> <p>And Data Structures Using C, Reema Thareja is also a great book that implement these data structures using C.</p>"},{"location":"#courses","title":"Courses","text":"<p>There some courses that use the book(Data Structures and Algorithms in Python) as textbook.(Tell me please, if you know other courses use it:-)</p> <ol> <li> <p>\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5-Python (2019\u79cb\u5b63)\uff0c\u6b66\u6c49\u5927\u5b66</p> <p>Great lecture notes.</p> </li> <li> <p>Jenny's lectures CS/IT NET&amp;JRF</p> <p>Jenny makes everything clear\uff01</p> </li> </ol>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Migrate from Poetry to uv for package management</li> </ul>"},{"location":"CHANGELOG/#110-2023-01-05","title":"[1.1.0] - 2023-01-05","text":""},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Use Poetry to manage the package</li> <li>Use MkDocs to build documentation</li> </ul>"},{"location":"CHANGELOG/#100-2020-01-29","title":"[1.0.0] - 2020-01-29","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li> Stack: ArrayStack, LinkedStack</li> <li> Queue: ArrayQueue, ArrayDeque</li> <li> Deque: LinkedDeque</li> <li> Positional List: PositionalList</li> <li> Priority Queues: UnsortedPriorityQueue, SortedPriorityQueue, HeapPriorityQueue</li> <li> LinkedLists: Singlellist, Doublellist</li> <li> Hash Tables: ChainHashMap, ProbeHashMap, SortedTableMap</li> <li> Trees: LinkedBinaryTree</li> <li> Search Trees: AVLTreeMap, SplayTreeMap, RedBlackTreeMap</li> <li> Graph: Adjacency Map, DFS/BFS, Floyd-Warshall</li> </ul>"}]}